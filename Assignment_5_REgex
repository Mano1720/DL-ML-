{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled8.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyNz7XnvZo7JZAYojrukS/Vp",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Mano1720/DL-ML-/blob/main/Assignment_5_REgex\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BMR8dbQfGrkS"
      },
      "source": [
        "# Task 5\n",
        "\n",
        "**k Manoj**\n",
        "\n",
        "Registration Id : *SIRSS2309*"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cIPOLiZZOnuN"
      },
      "source": [
        "***Q1. Given a list of integers, write a function to return the sum of all prime numbers in that***\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4SnOeObkGtfe",
        "outputId": "15d0e498-c89f-41d0-8b1d-dcba9af3ba10"
      },
      "source": [
        "prime=input(\"\").split(' ')\n",
        "sum=0\n",
        "for num in prime:\n",
        "    num=int(num)\n",
        "    sumPrime=True\n",
        "    if num > 1:\n",
        "        for k in range(2, num):\n",
        "            if (num %k) == 0:\n",
        "                sumPrime=False\n",
        "                break\n",
        "        if sumPrime:\n",
        "            sum+=num\n",
        "\n",
        "\n",
        "print(sum)            "
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1 3 4 5 6 7 8 9\n",
            "15\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ycuU3FSNO2O0"
      },
      "source": [
        "***Q2. Given a list of integers, write a function to check whether the list is strictly increasing or\n",
        "not.***"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZutwSaZoZI2t",
        "outputId": "eb6c0b51-04db-4295-a1a8-dfe434acc96b"
      },
      "source": [
        "list = [1,2,3,4,5,67]\n",
        "result = all(i < j for i, j in zip(list,list[1:]))\n",
        "result"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mmldw6iKPZWW"
      },
      "source": [
        "***Q3. Write a function to check whether a given list is expanding or not (the difference\n",
        "between adjacent elements should keep on increasing).***"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hk5C3J2uPG6x",
        "outputId": "f5fee2fd-2c39-4fb0-a3c1-46385d3a784e"
      },
      "source": [
        "def expand(m):\n",
        "  a=abs(m[1]-m[0])\n",
        "  b=abs(m[2]-m[1])\n",
        "  if a>=b:\n",
        "    return False\n",
        "  else:\n",
        "    for i in range(3,len(m)):\n",
        "      c=abs(m[i]-m[i-1])\n",
        "      if b >=c:\n",
        "        return False\n",
        "      b=c\n",
        "    else:\n",
        "        return True  \n",
        "\n",
        "\n",
        "\n",
        "m=[1,2,5,9,15]\n",
        "expand(m)"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "um-3dG-nRGen"
      },
      "source": [
        "***Q4. Write a function to calculate all permutations of a given string. (Without using itertools)***"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c6DpPtf8Qqb2",
        "outputId": "8588ae2e-9b1c-4046-c1a9-281b8edbd181"
      },
      "source": [
        "def permutations(n,all):\n",
        "  if  (len(n)==0):\n",
        "    print(all,end=\" \")\n",
        "    return\n",
        "\n",
        "  for i in range(len(n)):\n",
        "    c=n[i]\n",
        "    l=n[0:i]  \n",
        "    r=n[i+1:]\n",
        "    result=l+r\n",
        "    permutations(result,all+c)\n",
        "\n",
        "all=\"\"\n",
        "\n",
        "n=input(\"enter the sting\")\n",
        "permutations(n,all)"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter the stingroger\n",
            "roger rogre roegr roerg rorge roreg rgoer rgore rgeor rgero rgroe rgreo reogr reorg regor regro rerog rergo rroge rroeg rrgoe rrgeo rreog rrego orger orgre oregr orerg orrge orreg ogrer ogrre ogerr ogerr ogrre ogrer oergr oerrg oegrr oegrr oerrg oergr orrge orreg orgre orger orerg oregr groer grore greor grero grroe grreo gorer gorre goerr goerr gorre gorer geror gerro georr georr gerro geror grroe grreo grore groer grero greor erogr erorg ergor ergro errog errgo eorgr eorrg eogrr eogrr eorrg eorgr egror egrro egorr egorr egrro egror errog errgo erorg erogr ergro ergor rroge rroeg rrgoe rrgeo rreog rrego rorge roreg rogre roger roerg roegr rgroe rgreo rgore rgoer rgero rgeor rerog rergo reorg reogr regro regor "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TM_j7LYwcAjk"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}